name: Package-Core

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_URL:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_COMMIT:
        required: false
        type: string
      WRT_VERBOSE:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_URL: ${{inputs.WRT_URL}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_COMMIT: ${{inputs.WRT_COMMIT}}
  WRT_VERBOSE: ${{inputs.WRT_VERBOSE}}

jobs:
  wrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          testing: false

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export WRT_SOURCE=$(echo $WRT_URL | cut -d '/' -f 5-)
          echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          if [ -z "${{env.WRT_COMMIT}}" ]; then
            git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./wrt/
            cd ./wrt/
          else
            git init ./wrt/
            cd ./wrt/
            git remote add origin $WRT_URL
            git fetch --depth 1 origin ${{env.WRT_COMMIT}}
            git checkout ${{env.WRT_COMMIT}}
          fi
          export WRT_HASH=$(git log -1 --pretty=format:'%h')
          echo "WRT_HASH=$WRT_HASH" >> $GITHUB_ENV
          echo "WRT_SOURCE=$WRT_SOURCE-$WRT_HASH" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/feeds/

          $GITHUB_WORKSPACE/Scripts/Packages.sh

      - name: Update configs
        run: |   
          cd ./wrt/
          rm -rf .config
          cat $GITHUB_WORKSPACE/Configs/$WRT_TARGET.txt $GITHUB_WORKSPACE/Configs/Packages.txt >> .config
          make defconfig

      - name: Restore cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          key: build-${{env.WRT_SOURCE}}
          path: |
            ./wrt/build_dir
            ./wrt/staging_dir

      - name: Compile Packages
        run: |
          cd ./wrt/

          if [ "${{steps.restore-cache.outputs.cache-hit}}" != 'true' ]; then
            if [ "${{env.WRT_VERBOSE}}" == "true" ]; then
              make toolchain/install -j$(nproc) V=s 
              make target/linux/{clean,compile} -j$(nproc) V=s
            fi
            make toolchain/install -j$(nproc)
            make target/linux/{clean,compile} -j$(nproc)
          fi
          
          make package/feeds/luci/luci-app-passwall/download
          if [ "${{env.WRT_VERBOSE}}" == "true" ]; then
            make package/feeds/luci/luci-app-passwall/compile -j$(nproc) V=s
          fi
          make package/feeds/luci/luci-app-passwall/compile -j$(nproc)

      - name: Delete other build caches
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: |
          gh api -X GET /repos/${{github.repository}}/actions/caches | jq -r '.actions_caches[] | select(.key | startswith("build-")) | .id' > cache_ids.txt
          for cache_id in $(cat cache_ids.txt); do
            echo "Deleting cache ID: $cache_id"
            gh api -X DELETE /repos/${{github.repository}}/actions/caches/$cache_id
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save build cache
        if: steps.restore-cache.outputs.cache-hit != 'true' # Only save if cache was not restored
        uses: actions/cache/save@v4
        with:
          path: |
            ./wrt/build_dir
            ./wrt/staging_dir
          key: build-${{env.WRT_SOURCE}}

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -rf ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_SOURCE".txt

          ls -l ./bin/packages/x86_64/luci/

          for FILE in $(find ./bin/packages/ -type f -iname "*passwall*"); do
            echo $(basename $FILE)
            mv -f $FILE ./upload/
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@master
        with:
          tag_name: Packages_${{env.WRT_TARGET}}_${{env.WRT_SOURCE}}
          files: ./wrt/upload/*.*
          body: |
            SourceCode: ${{env.WRT_SOURCE}}
            Target: ${{env.WRT_TARGET}}
