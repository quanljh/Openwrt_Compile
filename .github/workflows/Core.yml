name: Core

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_URL:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PASSWORD:
        required: true
        type: string
      WRT_COMMIT:
        required: false
        type: string
      WRT_VERBOSE:
        required: false
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_URL: ${{inputs.WRT_URL}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PASSWORD: ${{inputs.WRT_PASSWORD}}
  WRT_COMMIT: ${{inputs.WRT_COMMIT}}
  WRT_VERBOSE: ${{inputs.WRT_VERBOSE}}

jobs:
  wrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
          testing: false

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Initialization Values
        run: |
          export WRT_SOURCE=$(echo $WRT_URL | cut -d '/' -f 5-)
          echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          if [ -z "${{env.WRT_COMMIT}}" ]; then
            git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./wrt/
            cd ./wrt/
          else
            git init ./wrt/
            cd ./wrt/
            git remote add origin $WRT_URL
            git fetch --depth 1 origin ${{env.WRT_COMMIT}}
            git checkout ${{env.WRT_COMMIT}}
          fi
          export WRT_HASH=$(git log -1 --pretty=format:'%h')
          echo "WRT_HASH=$WRT_HASH" >> $GITHUB_ENV
          echo "WRT_SOURCE=$WRT_SOURCE-$WRT_HASH" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Check Caches
        id: check-cache
        uses: actions/cache@main
        with:
          key: ${{env.WRT_TARGET}}-${{env.WRT_SOURCE}}
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir/host*
            ./wrt/staging_dir/tool*

      - name: Update Caches
        run: |
          if ${{steps.check-cache.outputs.cache-hit == 'true'}}; then
            sed -i 's/ $(tool.*\/stamp-compile)//g' ./wrt/Makefile
            sed -i 's/ $(tool.*\/stamp-install)//g' ./wrt/Makefile

            echo "toolchain skiped done!"
          else
            gh extension install actions/gh-actions-cache

            CACHE_LIST=$(gh actions-cache list --key "$WRT_TARGET-$WRT_SOURCE" | cut -f 1)
            for CACHE_KEY in $CACHE_LIST; do
               gh actions-cache delete $CACHE_KEY --confirm
            done

            echo "caches cleanup done!"
          fi

      - name: Update Feeds
        run: |
          cd ./wrt/

          sed -i 's#https://github.com/immortalwrt/luci.git^c60cfb5754a72d1ec93041fb8ef69c05695b51f5#https://github.com/quanljh/luci.git^1738a8cbcd039948c0dedc975ec91d86a663cc73#g' feeds.conf.default

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/
          $GITHUB_WORKSPACE/Scripts/packages.sh
          $GITHUB_WORKSPACE/Scripts/luci-packages.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          rm -rf ./tmp* ./.config*

          cat $GITHUB_WORKSPACE/Configs/$WRT_TARGET.txt <(echo "") $GITHUB_WORKSPACE/Configs/Common.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig

      - name: Download Packages
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        run: |
          cd ./wrt/
          if [ "${{env.WRT_VERBOSE}}" == "true" ]; then
            make -j$(nproc) V=s || make -j1 V=s
          else
            make -j$(nproc) || make -j1 V=s
          fi

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -rf ./.config ./upload/Config_"$WRT_TARGET"_"$WRT_SOURCE".txt

          rm -rf $(find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$")

          for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*.*") ; do
            echo $(basename $FILE)
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
            NEW_FILE="$WRT_SOURCE"_"$NAME"."$EXT"
            mv -f $FILE ./upload/$NEW_FILE
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.WRT_TARGET}}_${{env.WRT_SOURCE}}
          files: ./wrt/upload/*.*
          body: |
            SourceCode: ${{env.WRT_SOURCE}}
            Target: ${{env.WRT_TARGET}}
            Ip: ${{env.WRT_IP}}
            Password: ${{env.WRT_PASSWORD}}
